import scipy
import scipy.special
from scipy import array
from mpmath import *
mp.dps = 30
nan = float("nan")

input_1f1 = [(0.1, 0, 0.2, 0, 0.5, 0),
  (-0.1, 0, 0.2, 0, 0.5, 0),
  (0.1, 0, 0.2, 0, -0.5, 1),
  (1, 1, 1, 1, 1, -1),
  (1e-08, 0, 1e-08, 0, 1e-10, 0),
  (1e-08, 0, 1e-12, 0, -1e-10, 1e-12),
  (1, 0, 1, 0, 10, 1e-09),
  (1, 0, 3, 0, 10, 0),
  (500, 0, 511, 0, 10, 0),
  (8.1, 0, 10.1, 0, 100, 0),
  (1, 0, 2, 0, 600, 0),
  (100, 0, 1.5, 0, 2.5, 0),
  (-60, 0, 1, 0, 10, 0),
  (60, 0, 1, 0, 10, 0),
  (60, 0, 1, 0, -10, 0),
  (-60, 0, 1, 0, -10, 0),
  (1000, 0, 1, 0, 0.001, 0),
  (0.001, 0, 1, 0, 700, 0),
  (500, 0, 1, 0, -5, 0),
  (-500, 0, 1, 0, 5, 0),
  (20, 0, -9.999999999, 0, -2.5, 0),
  (20, 0, 9.999999999, 0, 2.5, 0),
  (-20, 0, -9.999999999999, 0, 2.5, 0),
  (50, 0, 10, 0, 0, 200),
  (-5, 0, -4.999999999, -4.999999999, -1, 0),
  (4, 0, 80, 0, 200, 0),
  (-4, 0, 500, 0, 300, 0),
  (5, 0, 0.1, 0, -2, 300),
  (-5, 0, 0.1, 0, 2, 300),
  (2, 8, -150, 1, 150, 0),
  (5, 0, 2, 0, 100, -1000),
  (-5, 0, 2, 0, -100, 1000),
  (-5, 0, -2, -1, 1, 1.9999999999),
  (1, 0, 1e-12, 0, 1, 0),
  (10, 0, 1e-12, 0, 10, 0),
  (1, 0, -1, 1e-12, 1, 0),
  (1000, 0, 1, 0, -1000, 0),
  (-1000, 0, 1, 0, 1000, 0),
  (-10, 500, 0, 5, 10, 0),
  (20, 0, 10, 1000, -5, 0)]

input_2f1 = [(0.1, 0, 0.2, 0, 0.3, 0, 0.5, 0),
  (-0.1, 0, 0.2, 0, 0.3, 0, 0.5, 0),
  (0.1, 0, 0.2, 0, -0.3, 0, -0.5, 0.5),
  (1e-08, 0, 1e-08, 0, 1e-08, 0, 1e-06, 0),
  (1e-08, 0, -1e-06, 0, 1e-12, 0, -1e-10, 1e-12),
  (1, 0, 10, 0, 1, 0, 0.5, 1e-09),
  (1, 0, -1, 1e-12, 1, 0, -0.8, 0),
  (2, 8, 3, -5, 1.41421356237309505, -3.14159265358979324, 0.75, 0),
  (100, 0, 200, 0, 350, 0, 0, 1),
  (2.000000001, 0, 3, 0, 5, 0, -0.75, 0),
  (-2, 0, -3, 0, -4.999999999, 0, 0.5, 0),
  (-1, 0, -1.5, 0, -2.000000000000001, 0, 0.5, 0),
  (500, 0, -500, 0, 500, 0, 0.75, 0),
  (500, 0, 500, 0, 500, 0, -0.6, 0),
  (-1000, 0, -2000, 0, -4000.1, 0, -0.5, 0),
  (-100, 0, -200, 0, -299.999999999, 0, 0.707106781186547524, 0),
  (300, 0, 10, 0, 5, 0, 0.5, 0),
  (5, 0, -300, 0, 10, 0, 0.5, 0),
  (10, 0, 5, 0, -300.5, 0, 0.5, 0),
  (2, 200, 5, 0, 10, 0, 0.6, 0),
  (2, 200, 5, -100, 10, 500, 0.8, 0),
  (2, 0, 5, 0, 10, -500, -0.8, 0),
  (2.25, 0, 3.75, 0, -0.5, 0, -1, 0),
  (1, 0, 2, 0, 4, 3, 0.6, -0.8),
  (1, 0, 0.9, 0, 2, 0, 0.5, 0.866025403784438647),
  (1, 0, 2.5, 0, 5, 0, 0.5, 0.866025403784438647),
  (-1, 0, 0.9, 0, 2, 0, 0.5, -0.866025403784438647),
  (4, 0, 1.1, 0, 2, 0, 0.5, 0.856025403784438647),
  (5, 0, 2.2, 0, -2.5, 0, 0.49, -0.866025403784438647),
  (0.666666666666666667, 0, 1, 0, 1.33333333333333333, 0, 0.5, 0.866025403784438647)]

input_1f1 = [(complex(a,b), complex(c,d), complex(e,f)) for (a,b,c,d,e,f) in input_1f1]
input_2f1 = [(complex(a,b), complex(c,d), complex(e,f), complex(g,h)) for (a,b,c,d,e,f,g,h) in input_2f1]

values_1f1 = ["1.317627178278509997399757",
"0.6955365651022610631291896",
"0.6672366401091494728274972 + 0.2747697201293347046972580j",
"1.468693939915885157138968 - 2.287355287178842391208172j",
"1.000000000100000000005000",
"0.9999990000000000499949230 + 9.999999999000000199276607e-9j",
"22026.46579480671650594467 + 2.202646579480671788513017e-5j",
"440.3093158961343303391580",
"17796.68553337393251718460",
"1.724131075992688190261525e+41",
"6.288367168216566372335719e+257",
"2748892975858.683147847924",
"-10.04895411296494845857952",
"18180868876189454286356.55",
"-0.0006713066845459067464259863",
"1233142540998588911.045463",
"2.279929853828663020140772",
"1.461353307199288894376798e+298",
"0.001053895943365451719183943",
"0.2514062642918051261159409",
"8857934344.81525674621",
"98.35313305809316962011164",
"-105135145476344.1665184761",
"-3.000605782805072019916337e+35 + 3.046849261045972142413568e+35j",
"0.5074215374545095881763114 + 0.2985772675044080019220312j",
"3.448551506216653665192688e+27",
"0.02490620131585418898684141",
"72085536321.63920896411561 - 15502891191.22414314525704j",
"28970450426.31837241073506 - 827625351585.3657987475855j",
"-9.853780031496242033869393e+135 + 3.293888962100131666983977e+136j",
"7.002864442038877938784365e+50 + 8.973775767458326172219755e+50j",
"719614044695.4444444444444 - 1233790613611.111111111111j",
"61.69999999254999938395424 + 9.899999997099999760242924j",
"2718281828457.879907818723",
"133253444077849905496106.7",
"-0.552899613132108876 + 2718281828459.045290034044j",
"-3.442664193278583478656936e-220",
"-2.593820783362005717939764e+215",
"7.086198763185099135487097e+43 + 2.328576049934718520414333e+43j",
"0.9937637036788281049868721 + 0.09968780195735593270615745j"]

values_u = ["0.9856751098607237066684088",
"1.002520896951293294367724",
"0.9701080957743545244199092 - 0.1338813166805648848810184j",
"0.2525037419617486372641198 - 0.03729239953577405407588643j",
"1.000000005772156724472291",
"1.000000005772156606861240 - 3.366078858739188698473457e-18j",
"0.09156333393978808187528815 - 8.436666060211918649306395e-12j",
"0.1100000000000000000000000",
"1.297332688136766430381440e-483",
"6.820648893830900163131430e-17",
"0.001666666666666666666666667",
"8.422103787876556846303102e-170",
"-8.361721767051092377122187e+82",
"1.754288686073269941703279e-100",
"8.907194205973079168906345e-84 + 1.520712953812276847980292e-83j",
"1.026096319182242966537965e+100",
"5.66721775955880209263100e-2566",
"0.9934703297917405353867391",
"8.329260279452927804476579e-1134 - 1.356778880366779151096120e-1134j",
"3.067500413472852599720015e+1133",
"-5.824024614923483312015675e-24 + 3.807021634941871508335508e-25j",
"6.286575812523988278438477e-18",
"-138456258991319.1884382",
"1.169559780176652688232269e-116 + 1.150125517846092548502142e-117j",
"3793.999996140999681854909 - 1954.999995858999660172124j",
"3.914094546912963687445026e-9",
"1575385800.000000000000000",
"2.667441558918124866494877e-14 - 4.100786379485191596871647e-13j",
"-85057532156.17501022483700 + 2429916308508.149999995204j",
"-2.131862604182294676488528e-6 - 1.229819394901298330855525e-5j",
"4.820818018244458734803167e-16 + 8.456468872012938375798606e-16j",
"-518122112180720.0000000000 + 888329241800000.0000000000j",
"-98.99999997099999760242924 + 616.9999999254999938395424j",
"0.4036526376769436129115659",
"2.035494064777534598826359e-13",
"0.2981736811615970371705392 + 8.024321425860014445426885e-14j",
"-1.032166114333944677781155e-2783 + 2.687820816272485219569667e-2784j",
"-1.043720438148058501031574e+2783",
"9.74013749670138717e+324 + 1.56511505880270809e+324j",
"-1.01860045123990191011951e+682 - 3.31811417246195975784228e+682j"]

values_2f1 = ["1.046432811217352081148524",
"0.9564342109682142072572870",
"1.027216624114001135278735 - 0.01357715756741794480664827j",
"1.000000000000010000005000",
"1.000000000000999999999950 - 9.999999999000000746807733e-15j",
"1023.999999999999774720000 + 2.047999999999999947328699e-5j",
"1.800000000000000044408921 - 1.058015996823814263973160e-12j",
"6882.46376201161136623040 - 6596.55577872448759039585j",
"1.471850083555048395218267e-7 - 8.537028228134686211648846e-8j",
"0.4922388588526510094898559",
"0.4749999999137499928510805",
"0.6250000000000001665334537",
"9.332636185032188789900895e-302",
"8.709809816217277112022433e-103",
"5.233580403196955743187251e+94",
"2.653635302903685450382631e-31",
"3.912238919961547168900641e+98",
"1.661006238211309107258631e-7",
"-3.852027081523918152877084e+32",
"1.499739394713931297220338e-7 + 5.771450716812294019062063e-7j",
"-4.103442641430787099930783 + 6.013632243569492029050978j",
"0.9994503141161222047660116 - 0.01598050965201121315743744j",
"-0.6312206769497026561085646",
"0.834550347995121294775051 - 0.316176129469793207667655j",
"0.9326335692419979404840808 + 0.4752005385816224924695633j",
"0.9504172281360489561179618 + 0.5487236425068058010526314j",
"0.7749999999999999944488849 + 0.3897114317029973780795494j",
"-0.4700976728350907516076148 + 0.5009861785815497011997705j",
"1084.589030597024248497232 + 5115.786480028669658228539j",
"0.8833193751427250009257148 + 0.5099846790190642877695291j"]

values_q = ["-0.7790027588020916885609073",
"-0.4312691484508644669706415",
"1.049656976724530092837139 - 1.453363459044239932947219j",
"6.9077546979858196147",
"11.512900449811692 - 1.565796493451160199863j",
"0 + 4.000000000000000246459699e-9j",
"-3.769911184307752037296140 + 0.1102170738737388081550537j",
"294403.262802920063527192 - 26777597.76869194139381977j",
"8.445356570478126549795968e+762 + 5.839305705618669863299498e+762j",
"-3.031467992728468600e-8 + 34.01230134288038019157773j",
"6944443.881475140155947114",
"-562949953421311.5386078325",
"-1.375422085129224909151513e+1313",
"1.499108355690650660041311e+1135 - 1.9149781540134057093116e+1429j",
"3.480732590430589034366462e-11882 - 5.512938832542125153074974e-11883j",
"1.936860105569459689410674e-559",
"-177129395903.8648733623003",
"1935360.000000000000000000",
"2.465142103003067065768635e-616",
"4.042754491859792825237098e+175 + 6.689461281807471725928248e+174j",
"-1.978107641149838547867587e+363 - 4.145123411550902253915354e+363j",
"1.315605101259212834603129e+27 - 8.745426209494863659019443e+26j",
"12.20963745670603546926738 - 12.20963745670603546926738j",
"111.98708132115288800137 + 226.20668700136307858691j",
"0.5000000000000000434531893",
"0 - 31.17691453623979173507282j",
"-0.4999999999999999565468107",
"0 + 996.5093885202956727705452j",
"1.696706208150527439924639 - 1.871794401111695993359565j",
"-2.022988864373351219218254e-16 + 0.8244196761845203919599205j"]

time_1f1_arb = [1.6e-05, 1.54e-05, 4.36e-05, 3.83e-05,  3.3e-06, 5.14e-06, 2.27e-06, 1.98e-05, 3.27e-05, 3.72e-05, 3.34e-06,  3.3e-05, 7.11e-05, 4.81e-05, 7.28e-05, 2.89e-05,  1.1e-05, 4.67e-05, 0.000267, 0.000259, 3.16e-05, 2.46e-05, 1.15e-05,  0.00013, 7.95e-06, 3.51e-05, 3.21e-06, 5.94e-05, 5.27e-06,  0.00142, 5.14e-06, 5.18e-06, 7.14e-06, 1.33e-05, 4.94e-05, 2.39e-05,  0.00153,  0.00309, 0.000491, 5.03e-05]

time_u_arb = [6.89e-05, 6.81e-05, 9.91e-05, 0.000121,  3.4e-05, 0.000152, 0.000863, 1.58e-06, 6.37e-06, 2.17e-06, 1.13e-06, 0.000206, 3.74e-05,  0.00142,  0.00076, 3.76e-05, 8.66e-05, 1.29e-05,  0.00181,  0.00035, 0.000232, 0.000226, 1.49e-05,   0.0061, 3.02e-06, 2.89e-05, 1.01e-06, 2.89e-05, 2.77e-06,  0.00496, 1.71e-05, 1.93e-06, 2.73e-06,  0.00021, 0.000361, 0.000426,   0.0575, 0.000752,  0.00201,   0.0001]

time_2f1_arb = [7.05e-05,  7.1e-05, 0.000116, 2.06e-05, 6.44e-06, 1.16e-05, 4.69e-06, 0.000407,  0.00247, 5.76e-05, 2.49e-06, 4.33e-06,   0.0018,  8.4e-06,  0.00364, 0.000213,  5.7e-06, 0.000652,  0.00056,  0.00203,  0.00158,  0.00785, 5.38e-05, 0.000821, 0.000727, 0.000684, 1.83e-06, 9.37e-06,  0.00333, 0.000741]

time_q_arb = [3.77e-05, 3.76e-05, 0.000372, 8.05e-05, 0.000201,  8.4e-06, 3.57e-05, 0.000236,  0.00152,  0.00026, 3.61e-05, 3.73e-05, 0.000483,  0.00148,   0.0173, 0.000389, 1.15e-05, 1.06e-05, 2.16e-05, 0.000235,  0.00738,   0.0582, 0.000214, 0.000614, 6.81e-06, 1.87e-05, 1.43e-05, 0.000117, 0.000273, 0.000351]

time_2f1_michel = [1.36e-06, 1.25e-06, 1.42e-06, 5.55e-08, 1.86e-07, 3.03e-07,
  1.66e-07, 3.97e-06, 4.91e-05, 1.27e-06, 8e-08, 5.28e-08, 1.36e-05, 1.31e-07,
  2.79e-05, 2.75e-06, 8.03e-06, 8.09e-06, 8.43e-06, 1.79e-05, 5.23e-06, 4.15e-07,
  1.39e-06, 2.01e-05, 1.94e-05, 1.66e-05, 6.63e-08, 1.14e-07, 3.77e-06, 1.82e-05]

values_2f1_michel = [complex(a,b) for (a,b) in [
    (1.046432811217351,0),
    (0.9564342109682147,0),
    (1.027216624114001,-0.01357715756741834),
    (1.00000000000001,0),
    (1.000000000001,-9.999999998999999e-15),
    (1024,2.048e-05),
    (1.8,-1.058015996823814e-12),
    (6882.463762011611,-6596.555778724484),
    (-nan,-nan),
    (0.4922388588526508,0),
    (0.47499999991375,0),
    (0.6250000000000002,0),
    (3.047459035998018e+102,0),
    (8.709809816217158e-103,0),
    (1.130028329415168e+224,0),
    (-0.3388505695624058,0),
    (3.912238919961548e+98,0),
    (-8.006807996589999e+29,0),
    (2.72290157274922e+133,0),
    (-1.266950805217239e+32,1.952907272064491e+32),
    (-4.110742718456851,6.007425563978819),
    (0.9994503141161223,-0.01598050965201122),
    (-0.631220676949703,0),
    (0.8345503479951217,-0.3161761294697931),
    (0.9326335692419967,0.4752005385816223),
    (0.9504172281360477,0.5487236425068065),
    (0.775,0.3897114317029974),
    (-0.4700976728350909,0.5009861785815496),
    (1084.589030597018,5115.786480028672),
    (0.8833193751427239,0.509984679019064)]]

print "Scipy 1F1"
errors_1f1_scipy = []
time_1f1_scipy = []
skipped = 0
for i in range(40):
    a, b, z = input_1f1[i]
    if im(a) == 0 and im(b) == 0:
        a = float(a.real); b = float(b.real)
        if im(z) == 0:
            z = float(z.real)
        else:
            z = complex(z)
        A = array(a).repeat(1000)
        B = array(b).repeat(1000)
        Z = array(z).repeat(1000)
        v = scipy.special.hyp1f1(a,b,z)
        u = mpmathify(values_1f1[i])
        u = mp.hyp1f1(a,b,z)
        t = timing(lambda: scipy.special.hyp1f1(A,B,Z)) / 1000
        err = abs(v-u) / abs(u)
        err = float(err)
        errors_1f1_scipy.append(err)
        time_1f1_scipy.append(t)
    else:
        skipped += 1

print "mean", "%.8f" % scipy.mean(time_1f1_scipy)
print "median", "%.8f" % scipy.median(time_1f1_scipy)
print "skipped", skipped
print

for e in sorted(errors_1f1_scipy, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))

exit(0)

print
print "Arb 1F1"
print "mean", "%.8f" % scipy.mean(time_1f1_arb)
print "median", "%.8f" % scipy.median(time_1f1_arb)
print

"""
print "Scipy U"
errors_u_scipy = []
time_u_scipy = []
skipped = 0
for i in range(40):
    a, b, z = input_1f1[i]
    if im(a) == 0 and im(b) == 0 and im(z) == 0:
        a = float(a.real); b = float(b.real)
        z = float(z.real)
        A = array(a).repeat(1000)
        B = array(b).repeat(1000)
        Z = array(z).repeat(1000)
        v = scipy.special.hyperu(a,b,z)
        u = mpmathify(values_u[i])
        u = mp.hyp1f1(a,b,z)
        t = timing(lambda: scipy.special.hyperu(A,B,Z)) / 1000
        err = abs(v-u) / abs(u)
        err = float(err)
        errors_u_scipy.append(err)
        time_u_scipy.append(t)
    else:
        skipped += 1

print "mean", "%.8f" % scipy.mean(time_u_scipy)
print "median", "%.8f" % scipy.median(time_u_scipy)
print "skipped", skipped
print

for e in sorted(errors_1f1_scipy, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))
"""

print
print "Arb U"
print "mean", "%.8f" % scipy.mean(time_u_arb)
print "median", "%.8f" % scipy.median(time_u_arb)
print

print
print "Michel 2F1"
print "mean", "%.8f" % scipy.mean(time_2f1_michel)
print "median", "%.8f" % scipy.median(time_2f1_michel)

errors_2f1_michel = []
for i in range(30):
    v = values_2f1_michel[i]
    u = mpmathify(values_2f1[i])
    error = abs(v-u) / abs(u)
    errors_2f1_michel.append(error)

for e in sorted(errors_2f1_michel, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))

"""
print "Scipy 2F1"
errors_2f1_scipy = []
time_2f1_scipy = []
skipped = 0
for i in range(30):
    a, b, c, z = input_2f1[i]
    if im(a) == 0 and im(b) == 0 and im(c) == 0:
        a = float(a.real); b = float(b.real); c = float(c.real)
        if im(z) == 0:
            z = float(z.real)
        else:
            z = complex(z)
        nreps = 1000
        A = array(a).repeat(nreps)
        B = array(b).repeat(nreps)
        C = array(c).repeat(nreps)
        Z = array(z).repeat(nreps)
        #print "yah", i
        import sys
        #save_stderr = sys.stderr
        #sys.stderr = open('/dev/null', 'w')
        v = scipy.special.hyp2f1(a,b,c,z)
        #sys.stderr = save_stderr
        u = mpmathify(values_2f1[i])
        # u = mp.hyp1f1(a,b,z)
        t = timing(lambda: scipy.special.hyp2f1(A,B,C,Z)) / nreps
        err = abs(v-u) / abs(u)
        err = float(err)
        errors_2f1_scipy.append(err)
        time_2f1_scipy.append(t)
    else:
        skipped += 1

print "mean", "%.8f" % scipy.mean(time_2f1_scipy)
print "median", "%.8f" % scipy.median(time_2f1_scipy)
print "skipped", skipped
print

for e in sorted(errors_2f1_scipy, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))
"""

"""
print
print "mpmath 2F1"
errors_2f1_mpmath = []
time_2f1_mpmath = []
skipped = 0
for i in range(30):
    a, b, c, z = input_2f1[i]
    with mp.workprec(53):
        v = mp.hyp2f1(a,b,c,z)
    u = mpmathify(values_2f1[i])
    with mp.workprec(53):
        t = timing(lambda: mp.hyp2f1(a,b,c,z))
    err = abs(v-u) / abs(u)
    err = float(err)
    errors_2f1_mpmath.append(err)
    time_2f1_mpmath.append(t)

print "mean", "%.8f" % scipy.mean(time_2f1_mpmath)
print "median", "%.8f" % scipy.median(time_2f1_mpmath)
print "skipped", skipped
print

for e in sorted(errors_2f1_mpmath, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))
"""


print
print "Arb 2F1"
print "mean", "%.8f" % scipy.mean(time_2f1_arb)
print "median", "%.8f" % scipy.median(time_2f1_arb)
print

print
print "Arb Q"
print "mean", "%.8f" % scipy.mean(time_q_arb)
print "median", "%.8f" % scipy.median(time_q_arb)
print

time_1f1_mma = [0.0000116,
6.800000000000001e-6,
0.0000212,
2.24e-6,
1.9200000000000003e-6,
0.000132,
2.800000000000000e-6,
0.000108,
6.800000000000001e-6,
0.000228,
0.000112,
0.00007920000000000001,
0.0000284,
0.0000296,
0.0000296,
0.0000284,
0.000512,
0.000128,
0.00024,
0.00024,
0.000228,
6.88e-6,
0.0000108,
0.0000356,
6.720000000000001e-6,
0.00172,
3.96e-6,
0.00014,
6.520000000000001e-6,
0.0152,
6.3200000000000005e-6,
6.520000000000001e-6,
7.48e-6,
6.96e-6,
0.00014000000000000001,
0.0000132,
0.00052,
0.000516,
0.03,
0.000016400000000000002]

values_1f1_mma = ["1.3176271782785098",
"0.6955365651022608",
"0.6672366401091494 + 0.27476972012933465j",
"1.4686939399158851 - 2.2873552871788423j",
"1.0000000001",
"0.9999990000000001 + 9.999999998999998e-9j",
"22026.465794806718 + 0.00002202646579480672j",
"440.3093158961343",
"17796.68553337393",
"1.7241310759926878e41",
"6.288367168216566e257",
"2.7488929758586816e12",
"-12.671107813419876",
"1.8180868876189456e22",
"-0.0006421895547367335",
"1.2331425409985887e18",
"2.279929853828663",
"1.46135330719929e298",
"-3.2786532800164843e21",
"-1.106787822254969639107891e24",
"8.857934344815258e9",
"98.35313305809315",
"-1.0513514547634405e14",
"-3.0006057828050665e35 + 3.0468492610459902e35j",
"0.5074215374545097 + 0.29857726750440805j",
"3.448551506216654e27",
"0.024906201315854193",
"7.20855363216394e10 - 1.5502891191224194e10j",
"2.8970450426318367e10 - 8.276253515853656e11j",
"-9.853780031496243e135 + 3.2938889621001316e136j",
"7.002864442038877e50 + 8.973775767458326e50j",
"7.196140446954445e11 - 1.233790613611111e12j",
"61.699999992550005 + 9.899999997099997j",
"2.71828182845788e12",
"1.332534440778499e23",
"-0.5529015801778213 + 2.718281828459045e12j",
"nan",
"nan",
"7.086198763185099e43 + 2.3285760499347184e43j",
"0.993763703678828 + 0.09968780195735591j"]

print
print "MMA 1F1"
print "mean", "%.8f" % scipy.mean(time_1f1_mma)
print "median", "%.8f" % scipy.median(time_1f1_mma)

errors_1f1_mma = []
for i in range(40):
    v = mpmathify(values_1f1_mma[i])
    u = mpmathify(values_1f1[i])
    error = abs(v-u) / abs(u)
    errors_1f1_mma.append(error)

    print "EH", i+1, v, u, error

for e in sorted(errors_1f1_mma, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))


time_u_mma = [0.00034,
0.000308,
0.0005200000000000001,
0.0000444,
0.000018,
0.000536,
0.00012,
0.0000124,
0.000018,
0.000014,
0.0000112,
0.00116,
0.0000764,
0.000532,
0.000712,
0.000076,
0.000066,
0.0000752,
0.000896,
0.000512,
0.000388,
0.000256,
0.0000168,
0.00292,
0.0000164,
0.0000892,
0.0000132,
0.0000932,
0.0000168,
0.0388,
0.0000896,
0.0000164,
0.000017199999999999998,
0.00047599999999999997,
0.00116,
0.00104,
0.0164,
0.000916,
0.108,
0.0005200000000000001]

values_u_mma = ["0.9856751098607237",
"1.0025208969512933",
"0.9701080957743545 - 0.13388131668056488j",
"0.25250374196174974 - 0.03729239953577301j",
"1.",
"1.0000000057721565 - 3.366078858739189e-18j",
"0.09156333393978804 - 8.436666060211898e-12j",
"0.11000000000000001",
"1.2973326881367674047273152773142388915e-483",
"6.820648893830899e-17",
"0.0016666666666666668",
"8.422103787876558e-170",
"-8.361721767051092e82",
"nan",
"8.907194206017448e-84 + 1.5207129538047725e-83j",
"1.026096319182243e100",
"5.66721775955881070965396811056340058e-2566",
"0.9934703297917403",
"nan",
"0.",
"-5.824024626896107e-24 + 3.8070215886547536e-25j",
"6.2865758230224435e-18",
"-1.3845625899131953e14",
"0. - 5.901757627776582e36j",
"3793.9999961409985 - 1954.9999958589997j",
"3.9140945469129635e-9",
"1.575385800000002e9",
"2.6674415589181412e-14 - 4.1007863794851786e-13j",
"-8.505753215617497e10 + 2.4299163085081504e12j",
"nan",
"4.820818018244443e-16 + 8.456468872012922e-16j",
"-5.1812211218072e14 + 8.883292418e14j",
"-98.99999997099997 + 616.9999999255001j",
"0.4036526376769436",
"2.0354940647775347e-13",
"0.2981736811615952 + 0j",
"-1.23548144593888171928159e-1480 + 0j",
"0.",
"0 + 0j",
"-1.0186004512399019101186098787740753260955157069e682 - 3.318114172461959757842546063620211576399412675e682j"]


print
print "MMA U"
print "mean", "%.8f" % scipy.mean(time_u_mma)
print "median", "%.8f" % scipy.median(time_u_mma)

errors_u_mma = []
for i in range(40):
    v = mpmathify(values_u_mma[i])
    u = mpmathify(values_u[i])
    error = abs(v-u) / abs(u)
    errors_u_mma.append(error)
    print "EH", i+1, v, u, error

for e in sorted(errors_u_mma, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))



# 2F1

values_2f1_mma = ["1.046432811217352",
"0.9564342109682142",
"1.0272166241140006 - 0.013577157567417987j",
"1.00000000000001",
"1.0000000000009999 - 9.999999999e-15j",
"1023.9999999999998 + 0.00002048j",
"1.8 - 1.0580159968238143e-12j",
"6882.463762011606 - 6596.555778724494j",
"1.4718500834336408e-7 - 8.53702821126353e-8j",
"0.492238858852651",
"0.47499999991374997",
"0.6250000000000001",
"9.332636185032189e-302",
"8.709809816216975e-103",
"5.2335804031969554e94",
"2.6536353029036856e-31",
"3.912238919961547e98",
"1.661006238211309e-7",
"-3.8520270815239185e32",
"1.4997393947139314e-7 + 5.771450716812294e-7j",
"-4.10344264143236331269266927252907224497 + 6.01363224356949509695620908582256365439j",
"0.9994503141161227 - 0.015980509652011202j",
"-0.6312206769497027",
"0.83455034799512084475736628519371151924 - 0.31617612946979323229612646173336543143j",
"0.93263356924199802833186367934104055166 + 0.47520053858162253357377835527586285025j",
"0.95041722813604900821360388363245874643 + 0.54872364250680571995388845607521943748j",
"0.775 + 0.3897114317029974j",
"-0.47009767283509085 + 0.5009861785815496j",
"1084.58903059716612915508449077606201171875 + 5115.78648002875252132071182131767272949219j",
"0.88331937514272473865872825626865960658 + 0.50998467901906452404148240020731464028j"]

# 2F1

time_2f1_mma = [0.0000128,
0.0000196,
0.0000576,
2.32e-6,
0.00017,
2.72e-6,
3.64e-6,
0.000216,
0.000828,
0.000018,
0.0000136,
0.0000112,
2.28e-6,
2.16e-6,
0.00228,
0.000224,
0.0000212,
0.000656,
0.848,
0.0232,
0.0256,
0.0000868,
0.0000204,
0.000204,
0.000164,
0.00017999999999999998,
0.000016,
0.0000244,
0.000256,
0.000164]

print
print "MMA 2F1"
print "mean", "%.8f" % scipy.mean(time_2f1_mma)
print "median", "%.8f" % scipy.median(time_2f1_mma)

errors_2f1_mma = []
for i in range(30):
    v = mpmathify(values_2f1_mma[i])
    u = mpmathify(values_2f1[i])
    error = abs(v-u) / abs(u)
    errors_2f1_mma.append(error)
    print "EH", i+1, v, u, error

for e in sorted(errors_2f1_mma, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))


# Q
# note: one of them indicated as inaccurate

values_q_mma = ["-0.779002758802092",
"-0.4312691484508637",
"1.0496569767245323 - 1.4533634590442404j",
"6.907754696028336",
"11.512790720757948 - 1.5657964938643207j",
"0. + 4e-9j",
"-3.7699111843077513 + 0.11021707387373902j",
"294403.2628031466 - 2.6777597768692132e7j",
"8.470465927008118844123026404574e762 + 6.174599285320959627108530787299e762j",
"0. + 34.01230136793905j",
"nan",
"nan",
"-1.37542208512925050757134515151741505535877e1313",
"3.373029956488399034941342609431521294371582008e1721 + 5.01653866615404152969240986351719170887609e1737j",
"3.4807325904099144207305277740219247681416299e-11882 - 5.512938832486710120055019716177749218429097e-11883j",
"nan",
"-1.7712939590386493e11",
"1.93536e6",
"2.465142103002588656454647422970583716108e-616",
"4.042754491860381e175 + 6.6894612818085145e174j",
"-1.97810764114916266290456737352168373e363 - 4.14512341155063654448848488310605284e363j",
"1.3156051012594546e27 - 8.745426209492175e26j",
"12.209637456706034 - 12.209637456706036j",
"111.98708132115325 + 226.2066870013632j",
"0.5 + 0j",
"0. - 31.176914536239785j",
"-0.5 + 0j",
"0. + 996.5093885202956j",
"1.6967062081505282 - 1.8717944011116951j",
"-1.0068609081116499e-16 + 0.824419676184521j"]

# Q

time_q_mma = [0.0000552,
0.000044,
0.000128,
0.0000404,
0.00024,
4.88e-6,
4.28e-6,
0.00672,
0.0014,
5.96e-6,
2.36e-6,
2.36e-6,
0.000576,
0.00188,
0.0052,
2.44e-6,
0.000038,
4.2e-6,
0.000132,
0.00124,
0.112,
0.000224,
0.0000668,
0.0000892,
4.52e-6,
6.04e-6,
5.48e-6,
7.12e-6,
0.000112,
0.000204]

print
print "MMA Q"
print "mean", "%.8f" % scipy.mean(time_q_mma)
print "median", "%.8f" % scipy.median(time_q_mma)

errors_q_mma = []
for i in range(30):
    v = mpmathify(values_q_mma[i])
    u = mpmathify(values_q[i])
    error = abs(v-u) / abs(u)
    errors_q_mma.append(error)
    print "EH", i+1, v, u, error

for e in sorted(errors_q_mma, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))


values_1f1_mma2 = ["1.31762717827850999739975129376958100982",
"0.69553656510226106312919251705561812725",
"0.66723664010914947282740801875615833217 + 0.27476972012933470469719349947523592614j",
"1.46869393991588515713896759732660426132 - 2.28735528717884239120817190670050180896j",
"1.00000000010000000000500000364338639858",
"0.9999990000000000499949230301233276323 + 9.99999999900000019927660657802e-9j",
"22026.4657948067165059446677478808847190066 + 0.00002202646579480671788513016690374078j",
"440.30931589613433033915799561122935219065",
"17796.68553337393251714295099836817972563221",
"1.7241310759926881902603609327849254357976e41",
"6.288367168216566372335718655805225167688810243e257",
"2.74889297585868314784683236292893887657760220630745e12",
"-10.04895411296494845857952095369884619644",
"1.81808688761894542863565474130721710079722e22",
"-0.0006713066845459067464259862569662436435932355708175719504",
"1.2331425409985889110454625515030346598e18",
"2.2799298538286630201407724627021633718",
"1.46135330719928889437679841230535864692324245214e298",
"0.0010538959433654517191839431898844391577190539225899465922",
"0.25140626429180512611594094772602261697",
"8.85793434481525674620525853133616812804866115383e9",
"98.35313305809316962011097674457860836098",
"-1.0513514547634416651847612722897735653695574441641594e14",
"-3.000605782805072019916337193492559050317095164228623528e35 + 3.046849261045972142413567683597205051299051164696579435e35j",
"0.50742153745450958817631138207052237925 + 0.29857726750440800192203124478857969356j",
"3.4485515062166536651926880177362030505082089362e27",
"0.0249062013158541889868414106813659162",
"7.20855363216392089641156056693985178389198026263e10 - 1.550289119122414314525704315529604361662982518871e10j",
"2.897045042631837241073506249185529907462289607711e10 - 8.2762535158536579874758546277497082440994879142563e11j",
"-9.85378003149624203386939304884041908507e135 + 3.293888962100131666983976525019882757743e136j",
"7.0028644420388779387843652926186556938438590009566e50 + 8.9737757674583261722197551345514911809621932923695e50j",
"7.1961404469544444444444444444444444444444444444445e11 - 1.23379061361111111111111111111111111111111111111111e12j",
"61.69999999254999938395429759870945542034 + 9.89999999709999976024273966860855348641j",
"2.71828182845787990781920499626191125940773789622821e12",
"1.332534440778499054961067229809993409779352e23",
"-1.91204052630112783820374563969528194142 + 2.71828182845904529003404375467362169566036872136742e12j",
"-3.44266419327858347865693568348865593486342606231134e-220",
"-2.59382078336200571793976408157920288042214e215",
"7.0861987631850991354870970533908080749935374e43 + 2.3285760499347185204143330537035894163741612e43j",
"0.99376370367882810498687698002941175995 + 0.09968780195735593270615864797195759228j"]

time_1f1_mma2 = [0.00005520000000000001,
0.0000528,
0.00014000000000000001,
0.0000232,
0.0000208,
0.000228,
0.0000196,
0.000204,
0.00004,
0.0004,
0.000252,
0.000276,
0.000252,
0.000132,
0.000268,
0.000128,
0.00196,
0.0003,
0.00296,
0.00296,
0.000396,
0.0000492,
0.000104,
0.000248,
0.0000384,
0.00216,
0.0000192,
0.000448,
0.0000368,
0.016,
0.0000408,
0.0000356,
0.0000488,
0.0000436,
0.000248,
0.0000924,
0.0124,
0.0124,
0.0276,
0.0000984]

print
print "MMA2 1F1"
print "mean", "%.8f" % scipy.mean(time_1f1_mma2)
print "median", "%.8f" % scipy.median(time_1f1_mma2)

errors_1f1_mma2 = []
for i in range(40):
    v = mpmathify(values_1f1_mma2[i])
    u = mpmathify(values_1f1[i])
    error = abs(v-u) / abs(u)
    errors_1f1_mma2.append(error)
    print "EH", i+1, v, u, error

for e in sorted(errors_1f1_mma2, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))

values_u_mma2 = ["0.98567510986072370666841565266724386575",
"1.00252089695129329436772091513990279752",
"0.97010809577435452441959681632647695117 - 0.13388131668056488488113652070707186434j",
"0.25250374196174863727171010142473970605 - 0.03729239953577405407655577155811255785j",
"1.0000000057721567244722910195468132978",
"1.00000000577215660686124032891358795106 - 3.36607885873918868813e-18j",
"0.0915633339397880818755051037368736515 - 8.43666606021191864978260665e-12j",
"0.11",
"1.29733268813676643038144e-483",
"6.82064889383090016313142976922494383831515e-17",
"0.0016666666666666666666666666666666666666666666666666666667",
"8.422103787876758626460696586239321082933587e-170",
"-8.361721767051092377122187495725492491243329e82",
"1.754288686073269941703279271675677833742932937516880278e-100",
"8.907194205973079168906344782600208007101542400429631e-84 + 1.5207129538122768479802919652636183017855669843013162e-83j",
"1.026096319182242966537964614255480248600499e100",
"5.66721775955880209263091626595748266e-2566",
"0.99347032979174053538673908923191478212",
"8.32926027945292780447657856717048017503854e-1134 - 1.35677888036677915109612022630531400196522e-1134j",
"3.067500413472852599720015436531699737704372755913217078e1133",
"-5.8240246149234833120156746655389242800701460462855598e-24 + 3.8070216349418715083355081920283940147023832198939448e-25j",
"6.2865758125239887423073251448731391992861e-18",
"-1.3845625899131918843824718510847143231430633248349375e14",
"1.16955978017665268823226941984163394647e-116 + 1.1501255178460925485021420068651227011e-117j",
"3793.99999614099968185490850480310976968619 - 1954.99999585899966017212415530285983257319j",
"3.9140945469129636874450256944830302156474747824712e-9",
"1.57538579999999999999999999999999999999036175506e9",
"2.66744155891812486649496573137469685092673739e-14 - 4.100786379485191596871509179538984270143902172e-13j",
"-8.505753215617501022483699945869128899990925815879e10 + 2.42991630850814999999520363223037833221574275469398e12j",
"-2.1318626041822947456295804854003843651317189560615591e-6 - 0.000012298193949012983377543818672161879977615676414578209j",
"4.820818018244458734803185443545327877956007e-16 + 8.456468872012938375798679103167388517751702e-16j",
"-5.1812211218072e14 + 8.883292418e14j",
"-98.99999997099999760221123319810519383701 + 616.9999999254999938389209294495572020744j",
"0.40365263767694361291156134342113333193",
"2.035494064777532844646512141470508609772764611e-13",
"0.29817368116159703716909063256354569463 + 4.1505222561320769086613538e-13j",
"-1.0321661143339446777811553757128804202012321513144e-2783 + 2.687820816272485219569666999981368995060740565977e-2784j",
"-1.0437204381480585010315738325506174697046391205e2783",
"9.740137496701387166817382535125307726044665079323389711e324 + 1.565115058802708086270980719492137184834146305879420527e324j",
"-1.0186004512399019101186098787740753260955157069e682 - 3.318114172461959757842546063620211576399412675e682j"]

time_u_mma2 = [0.000356,
0.000316,
0.000524,
0.000408,
0.000108,
0.000552,
0.000272,
0.0000268,
0.0000388,
0.00004,
0.0000252,
0.00116,
0.00016,
0.00172,
0.00212,
0.0000844,
0.000116,
0.000116,
0.00304,
0.00152,
0.0012,
0.000524,
0.0000548,
0.026,
0.0000484,
0.0000948,
0.00003,
0.00022,
0.0000544,
0.136,
0.000180,
0.000052,
0.0000632,
0.000488,
0.00112,
0.000608,
0.444,
0.0072,
0.352,
0.000536]

print
print "MMA2 U"
print "mean", "%.8f" % scipy.mean(time_u_mma2)
print "median", "%.8f" % scipy.median(time_u_mma2)

errors_u_mma2 = []
for i in range(40):
    v = mpmathify(values_u_mma2[i])
    u = mpmathify(values_u[i])
    error = abs(v-u) / abs(u)
    errors_u_mma2.append(error)
    print "EH", i+1, v, u, error

for e in sorted(errors_u_mma2, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))


values_2f1_mma2 = ["1.0464328112173520811475651369472889235",
"0.956434210968214207257661437057488493",
"1.02721662411400113527803171773649268363 - 0.01357715756741794480685042844413636023j",
"1.00000000000001000000500000338309258971",
"1.00000000000099999999995000508171465516 - 9.99999999900000074680773e-15j",
"1023.9999999999997747199999999999836529626 + 0.00002047999999999999947328699305533235j",
"1.80000000000000004440892067406241452386 - 1.05801599682381426397315998e-12j",
"6882.46376201161136762486145988040355281084 - 6596.55577872448758806541779245317672133774j",
"1.471850083555048736128018475715588931404655540046487e-7 - 8.53702822813468234761521188516034611665408958617663e-8j",
"0.49223885885265100948802861567085388327",
"0.47499999991374999285108049924826275155",
"0.62500000000000016653345369377340710783",
"9.332636185032188789900895447238171696170914464e-302",
"8.709809816217277112022433435970915678640336776355936e-103",
"5.2335804031969557431872506098987833669093860759180772775e94",
"2.6536353029036854503826313328048044310973313358e-31",
"3.9122389199615471689006413255944918114982e98",
"1.661006238211309107258631019161864508574427528415759e-7",
"-3.852027081523918152877084269090778390369258375109763e32",
"1.499739394713931297220338437867074884491538633754749e-7 + 5.771450716812294019062062939642726012272306740670797e-7j",
"-4.10344264143078709993078283485989332491 + 6.01363224356949202905097757679607007748j",
"0.99945031411612220476200434085426356416 - 0.01598050965201121315455412552435209296j",
"-0.63122067694970265641176977875237066149",
"0.8345503479951212947741874493460377211 - 0.31617612946979320766750027045315247614j",
"0.93263356924199794048273467525775300754 + 0.47520053858162249246884579554039710632j",
"0.95041722813604895611886505082542647596 + 0.54872364250680580105315210554333192108j",
"0.77499999999999999444888487687421729788 + 0.38971143170299737807954935969110939573j",
"-0.47009767283509075160761476224330260253 + 0.50098617858154970119977050680284718632j",
"1084.58903059702424850172822964271918719119 + 5115.78648002866965823568916256843857536986j",
"0.88331937514272500092503371279606080327 + 0.50998467901906428776910881851148534118j"]

time_2f1_mma2 = [0.000208,
0.000448,
0.000784,
0.0000171,
0.00064,
0.0000368,
0.0000248,
0.00328,
0.0032,
0.000212,
0.0000264,
0.0000232,
0.0000156,
0.0000188,
0.0024,
0.000252,
0.0000408,
0.00068,
1.02,
0.026,
0.0468,
0.000728,
0.000364,
0.00112,
0.000776,
0.000844,
0.00003,
0.0000644,
0.00112,
0.000808]

print
print "MMA2 2F1"
print "mean", "%.8f" % scipy.mean(time_2f1_mma2)
print "median", "%.8f" % scipy.median(time_2f1_mma2)

errors_2f1_mma2 = []
for i in range(30):
    v = mpmathify(values_2f1_mma2[i])
    u = mpmathify(values_2f1[i])
    error = abs(v-u) / abs(u)
    errors_2f1_mma2.append(error)
    print "EH", i+1, v, u, error

for e in sorted(errors_2f1_mma2, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))

values_q_mma2 = ["-0.7790027588020916885502108473639208718",
"-0.43126914845086446695866432835641524308",
"1.04965697672453009283976295226659380622 - 1.45336345904423993294696148475124034018j",
"6.90775469798581961473269419549047913619",
"11.51290044981169171161226313699511365001 - 1.56579649345116019986351534089230619271j",
"0 + 4.000000000000000246459699164452758519735543108905e-9j",
"-3.76991118430775203729614030697611865695 + 0.11021707387373880815505369318331417278j",
"294403.26280292006352719202237627511057979887 - 2.677759776869194139381977181224762330837273076e7j",
"8.4453567337341116995721789373845956615496714415517e762 + 5.8393057199115042207516450064322999223079221556269e762j",
"-3.031467992648046548076911938479e-8 + 34.01230134288038010199686254158364074886j",
"6.94444388147514015594711378382088653204120073e6 + 0j",
"-5.6294995342131153860783245076616643939093339796440057e14 + 0j",
"-1.37542208512922490915151348441077565299211e1313",
"0 + 4.6411492803866777000040201947493543983e1713j",
"3.480732590430589034366462058318147837943004e-11882 - 5.512938832542125153074974473291078679077763e-11883j",
"1.93686010556945968941067393379693128356e-559 + 0j",
"-1.7712939590386487336230034320508218475964781827676e11",
"1.93536e6",
"2.465142103003067065768635337663712441533e-616",
"4.0427544918597928250834345775812755167587e175 + 6.689461281807471699260429798697823985985e174j",
"-1.9781076411498385478675874558294113355815400658082812819e363 - 4.1451234115509022539153544466490305864259949119546461351e363j",
"1.3156051012592128346031293715971364613981931032e27 - 8.745426209494863659019443370673630212831587103e26j",
"12.20963745670603546915471963766848827188 - 12.20963745670603546915471963766848827188j",
"111.98708132115288800133463820163370883165 + 226.20668700136307858685911706397853038197j",
"0.50000000000000004345318932600586324347 + 0j",
"0 - 31.17691453623979173507282412841617481163j",
"-0.49999999999999995654681067399413675653 + 0j",
"0 + 996.50938852029567277054523940842538650678j",
"1.69670620815052743991854524528175142315 - 1.87179440111169599335956485925816014404j",
"-2.0230177695745842063928e-16 + 0.82441967618452039195874163436052908295j"]

time_q_mma2 = [0.00136,
  0.000752,
  0.0014,
  0.00074,
  0.00304,
  0.0000916,
  0.0000356,
  0.03,
  0.0016,
  0.00104,
  0.000652,
  0.000356,
  0.00104,
  0.0022,
  0.0104,
  0.000804,
  0.00017999999999999998,
  0.0000264,
  0.0026,
  0.0032,
  0.184,
  0.00108,
  0.000368,
  0.000752,
  0.0000656,
  0.0000752,
  0.0000712,
  0.0000788,
  0.000184,
  0.00184]

print
print "MMA2 Q"
print "mean", "%.8f" % scipy.mean(time_q_mma2)
print "median", "%.8f" % scipy.median(time_q_mma2)

errors_q_mma2 = []
for i in range(30):
    v = mpmathify(values_q_mma2[i])
    u = mpmathify(values_q[i])
    error = abs(v-u) / abs(u)
    errors_q_mma2.append(error)
    print "EH", i+1, v, u, error

for e in sorted(errors_q_mma2, key = lambda x: (x!=x, x)):
    print nstr(e), nstr(log(e,2))

